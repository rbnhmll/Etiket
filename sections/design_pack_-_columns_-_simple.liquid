{%- comment -%}
{
  "pack_name": "Columns - simple",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This premium section will not display properly without an active subscription for <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a>. If you need any support please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with your questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{%- comment -%} Color: check if color is set to transparent {%- endcomment -%}
{%- assign button_alpha = section.settings.button_background_color | color_extract: 'alpha' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  {%- capture main_font -%}{{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }}{%- endcapture -%}
  {%- capture heading_font -%}{{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }}{%- endcapture -%}
{%- endif -%}

#DP--{{ section.id }} {
  background: {{ section.settings.background_color }};
  margin-top: {{ section.settings.outer_margin }}px;
  margin-bottom: {{ section.settings.outer_margin }}px;
}
#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
}

#DP--{{ section.id }} .dsgn-pck__columns {
  justify-content: center;
  flex-wrap: wrap;
  gap: 20px;
}

#DP--{{ section.id }} .dsgn-pck__flex-item {
  flex: 0 0 calc(100%/{{ section.settings.per_row }} - 20px);
  align-self: stretch;
  display: flex;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  display: flex;
  flex-direction: column;
  position: relative;
  flex: 1 0 auto;
  border-radius: {{ section.settings.text_background_border_radius }}px;
  background: {{ section.settings.text_background_color }};
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper {
  display: block;
  overflow: hidden;
  width: {{ section.settings.image_size }}%;
}

#DP--{{ section.id }} .dsgn-pck__image__wrapper--offset {
  aspect-ratio: 1000/500;
  margin: auto;
  flex: 0 0 auto;
}

#DP--{{ section.id }} .dsgn-pck__image-absolute {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translate(-50%, -50%);
}

#DP--{{ section.id }} .dsgn-pck__item img {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__image--circle .dsgn-pck__image__wrapper {
  border-radius: 50%;
}

#DP--{{ section.id }} .dsgn-pck__image--rounded .dsgn-pck__image__wrapper {
  border-radius: 5px;
}

#DP--{{ section.id }} .dsgn-pck__image--circle svg,
#DP--{{ section.id }} .dsgn-pck__image--rounded svg,
#DP--{{ section.id }} .dsgn-pck__image--square svg {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__image--none img {
  object-fit: contain;
}

#DP--{{ section.id }} .dsgn-pck__text-content {
  padding: 1.2em 1.2em 2em;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
  grid-gap: 1.2em;
}

#DP--{{ section.id }} .dsgn-pck__small-heading + .dsgn-pck__text,
#DP--{{ section.id }} .dsgn-pck__small-heading + .dsgn-pck__button {
  margin-top: calc({{ section.settings.text_size }}px * 0.15);
}

#DP--{{ section.id }} .dsgn-pck__text + .dsgn-pck__button {
  margin-top: calc({{ section.settings.text_size }}px * 0.2);
}

#DP--{{ section.id }} .dsgn-pck__small-heading {
  margin: 0;
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.heading_color }};
  font-size: calc(var(--dp-g-small-heading-size, var(--dp-small-heading-size, 24px)) * {{ section.settings.text_size | times: 0.012 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__small-heading a {
  color: inherit;
  text-decoration: none;
}

#DP--{{ section.id }} .dsgn-pck__text {
  margin: 0;
  color: {{ section.settings.text_color }};
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__button {
  border-color: transparent;
  display: inline-block;
  text-decoration: none;
  padding: 0.5em 1.2em;
  transition: all 0.3s ease-in-out;
  border: thin solid;
  border-radius: {{ section.settings.button_radius }}px;
  border-color: {%- if button_alpha != 0 -%}{{ section.settings.button_background_color }}{%- else -%}{{ section.settings.button_label_color }}{%- endif -%};
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  color: {{ section.settings.button_label_color }};
  background-color: {{ section.settings.button_background_color }};
  {%- if section.settings.override_theme_font != blank -%}
    font-family: {{ main_font }};
    font-weight: {{ section.settings.main_font.weight }};
    font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  width: max-content;
}

#DP--{{ section.id }} .dsgn-pck__button:hover {
  opacity: 1;
  {%- if button_alpha != 0 -%}
  background-color: {{ section.settings.button_background_color | color_darken: 10 }};
  border-color: transparent;
  {%- else -%}
  background-color: {{ section.settings.button_label_color | color_modify: 'alpha', 0.1 }}
  {%- endif -%};
}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phone to portrait tablet */
@media (max-width: 767px) {

}
/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }
  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 70%;
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
  }

  {%- if section.settings.mobile_display == 'scroll' -%}
    #DP--{{ section.id }} .dsgn-pck__sizer {
      min-width: 100%;
    }

    #DP--{{ section.id }} .dsgn-pck__columns {
      flex-wrap: nowrap;
      -webkit-overflow-scrolling: touch;
      overflow-x: scroll;
      justify-content: flex-start;
      scroll-snap-type: x mandatory;
      margin: 0;
      gap: 0;
      padding-bottom: 20px;
    }

    #DP--{{ section.id }} .dsgn-pck__flex-item {
      min-width: 75vw;
      scroll-snap-align: start;
      position: relative;
      padding-left: 20px;
    }

    #DP--{{ section.id }} .dsgn-pck__flex-item:last-child {
      padding-right: 20px;
    }

    #DP--{{ section.id }} .dsgn-pck__columns::-webkit-scrollbar {
      -webkit-appearance: none;
    }

    #DP--{{ section.id }} .dsgn-pck__columns::-webkit-scrollbar:vertical {
      width: 50%;
    }

    #DP--{{ section.id }} .dsgn-pck__columns::-webkit-scrollbar:horizontal {
      height: 4px;
    }

    #DP--{{ section.id }} .dsgn-pck__columns::-webkit-scrollbar-thumb {
      border-radius: 8px;
      {% comment %} border: thin solid {{ section.settings.text_color }}; {% endcomment %}
      background-color: rgba(255, 255, 255, 0.8);
    }
  {%- else -%}

    #DP--{{ section.id }} .dsgn-pck__flex-item {
      min-width: 100%;
    }
  {%- endif -%}

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__columns-simple dsgn-pck__section" {%- if section.settings.animation != 'none' -%}data-animated-section{%- endif -%}>
  <div class="dsgn-pck__sizer">
    <div class="dsgn-pck__columns dsgn-pck__flex">
      {%- for block in section.blocks -%}
        <div class="dsgn-pck__flex-item dsgn-pck__item dsgn-pck__block-{{ block.id }} dsgn-pck__image--{{ section.settings.image_crop }}" {{ block.shopify_attributes }} style="--dsgn-pck-animate: {{ forloop.index }};">
          {%- if block.settings.image != blank -%}
            {% comment %} Half-size of image for negative space {% endcomment %}
            <div class="dsgn-pck__image__wrapper dsgn-pck__image__wrapper--offset">
              <svg viewBox="0 0 1000 500"></svg>
            </div>
          {%- endif -%}
          <div class="dsgn-pck__inner-content">
            {%- if block.settings.image != blank -%}
                <div class="dsgn-pck__image__wrapper dsgn-pck__image-absolute">
                  <svg viewBox="0 0 1000 1000"></svg>
                  <a {% if block.settings.button_link != blank %}href="{{ block.settings.button_link }}" {% endif %} {% if block.settings.external_link %}target="_blank"{% endif %}>
                  {{ block.settings.image | image_url: width: 1000 | image_tag: loading: 'lazy' }}
                  </a>
                </div>
              {% comment %} Half-size of image for negative space {% endcomment %}
              <div class="dsgn-pck__image__wrapper dsgn-pck__image__wrapper--offset">
                <svg viewBox="0 0 1000 500"></svg>
              </div>
            {%- endif -%}
            <div class="dsgn-pck__text-content  dsgn-pck__justify-{{ section.settings.text_alignment }}">
              <div class="dsgn-pck__text-content__wrapper">
                {%- if block.settings.title != blank -%}
                    <h2 class="dsgn-pck__small-heading">
                      <a {% if block.settings.button_link != blank %}href="{{ block.settings.button_link }}" {% endif %} {% if block.settings.external_link %}target="_blank"{% endif %}>
                      {{ block.settings.title | newline_to_br }}
                      </a>
                    </h2>
                {%- endif -%}
                {%- if block.settings.text != blank -%}
                  <div class="dsgn-pck__text dsgn-pck__rte">{{ block.settings.text }}</div>
                {%- endif -%}
              </div>
              {%- if block.settings.button_label != blank -%}
                <div class="dsgn-pck__text-content__button">
                  <a class="dsgn-pck__button" {%- if block.settings.button_link != blank -%}href="{{ block.settings.button_link }}"{%- endif -%} {%- if block.settings.external_link -%}target="_blank"{%- endif -%}>{{ block.settings.button_label }}</a>
                </div>
              {%- endif -%}
            </div>
          </div>
        </div>
      {%- endfor -%}
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Columns - simple",
  "class": "DP__columns-simple",
  "settings": [
    {
      "type": "range",
      "id": "per_row",
      "label": "Columns per row",
      "default": 3,
      "min": 1,
      "max": 6
    },
    {
      "type": "select",
      "id": "image_crop",
      "label": "Image crop",
      "default": "circle",
      "options": [
        {
          "value": "circle",
          "label": "Circle"
        },
        {
          "value": "rounded",
          "label": "Rounded"
        },
        {
          "value": "square",
          "label": "Square"
        },
        {
          "value": "none",
          "label": "Original"
        }
      ]
    },
    {
      "type": "range",
      "id": "image_size",
      "label": "Image size",
      "default": 60,
      "min": 40,
      "max": 90,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 60,
      "max": 120,
      "step": 5,
      "default": 100,
      "unit": "%"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "default": "center",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        },
        {
          "value": "justify",
          "label": "Justify"
        }
      ]
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Headings",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_label_color",
      "label": "Button label",
      "default": "#4B4949"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "range",
      "id": "button_radius",
      "label": "Button border radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 0,
      "unit": "px"
    },
    {
      "type": "color_background",
      "id": "text_background_color",
      "label": "Text background",
      "default": "linear-gradient(180deg, rgba(255, 255, 255, 1), rgba(255, 255, 255, 1) 100%)"
    },
    {
      "type": "range",
      "id": "text_background_border_radius",
      "label": "Text background border radius",
      "min": 0,
      "max": 20,
      "default": 8,
      "unit": "px"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background",
      "default": "linear-gradient(270deg, rgba(240, 110, 105, 1), rgba(249, 208, 163, 1) 100%)"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "fade-in",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "📱 Mobile"
    },
    {
      "type": "select",
      "id": "mobile_display",
      "label": "Display",
      "default": "scroll",
      "options": [
        {
          "value": "scroll",
          "label": "Scroll"
        },
        {
          "value": "grid",
          "label": "Grid"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 60,
      "max": 100,
      "step": 5,
      "default": 85,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "html",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "html",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "blocks": [
    {
      "type": "column",
      "name": "Column",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nibh enim, ornare at consequat sed, placerat quis libero. Curabitur id nulla ut nunc aliquam sodales.</p>"
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "Button",
          "default": "Learn more"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button link"
        },
        {
          "type": "checkbox",
          "id": "external_link",
          "label": "Open this link in a new window"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Columns - simple 🎒",
      "blocks": [
        {
          "type": "column"
        },
        {
          "type": "column"
        },
        {
          "type": "column"
        },
        {
          "type": "column"
        }
      ]
    }
  ]
}
{% endschema %}
{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}">
(function(){
  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    load: function(section){
      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }
  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });
  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);
  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
